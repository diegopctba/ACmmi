/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TelaAvaliador.java
 *
 * Created on 08/09/2009, 00:07:29
 */
package appcmmi.form.empresa;

import appcmmi.db.facade.AvaliadorFacade;
import appcmmi.db.pojo.Avaliador;
import appcmmi.funcoes.Funcoes;
import appcmmi.modelo.bind.ModeloAvaliador;
import java.util.List;
import javax.swing.JDialog;
import org.hibernate.JDBCException;

/**
 *
 * @author Alexandre
 */
public class TelaAvaliador extends javax.swing.JInternalFrame {

    /** Creates new form TelaAvaliador */
    public TelaAvaliador() {
        inicial();
    }

    public TelaAvaliador(JDialog dialog, boolean depende) {
        this.dialog = dialog;
        this.depende = depende;
        inicial();
    }

    private void inicial() {
        model = new ModeloAvaliador();
        initComponents();
        setClosable(true);
        setMaximizable(true);
        setSize(700, 450);
        setTitle("Cadastro/Manutenção de Avaliadores");
        setVisible(true);
        selecionar.setVisible(depende);
        selecionar.setEnabled(depende);
        salvar.setEnabled(false);
        cancelar.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rg = new javax.swing.JTextField();
        idAvaliador = new javax.swing.JTextField();
        nome = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cpf = new javax.swing.JTextField();
        novo = new javax.swing.JButton();
        salvar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaAvaliador = new javax.swing.JTable();
        pesquisar = new javax.swing.JButton();
        sair = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        excluir = new javax.swing.JButton();
        alterar = new javax.swing.JButton();
        selecionar = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro/Manutenção de Avaliadores");
        getContentPane().setLayout(null);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nome:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(30, 40, 60, 17);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("RG:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(230, 70, 70, 17);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Código:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(20, 10, 70, 17);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.avaliador.rg}"), rg, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), rg, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        getContentPane().add(rg);
        rg.setBounds(300, 70, 130, 27);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.avaliador.idavaliador}"), idAvaliador, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), idAvaliador, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        getContentPane().add(idAvaliador);
        idAvaliador.setBounds(90, 10, 130, 27);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.avaliador.nome}"), nome, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), nome, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        getContentPane().add(nome);
        nome.setBounds(90, 40, 340, 27);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("CPF:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 70, 70, 17);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.avaliador.cpf}"), cpf, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), cpf, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        getContentPane().add(cpf);
        cpf.setBounds(90, 70, 130, 27);

        novo.setText("Novo");
        novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoActionPerformed(evt);
            }
        });
        getContentPane().add(novo);
        novo.setBounds(230, 10, 100, 29);

        salvar.setText("Salvar");
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });
        getContentPane().add(salvar);
        salvar.setBounds(550, 110, 110, 29);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${model.listaAvaliador}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, tabelaAvaliador);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nome}"));
        columnBinding.setColumnName("Nome");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cpf}"));
        columnBinding.setColumnName("CPF");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${rg}"));
        columnBinding.setColumnName("RG");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.avaliador}"), tabelaAvaliador, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.selecionados}"), tabelaAvaliador, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(tabelaAvaliador);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 140, 650, 180);

        pesquisar.setText("Pesquisar");
        pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarActionPerformed(evt);
            }
        });
        getContentPane().add(pesquisar);
        pesquisar.setBounds(10, 110, 110, 29);

        sair.setText("Fechar");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });
        getContentPane().add(sair);
        sair.setBounds(580, 330, 80, 29);

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        getContentPane().add(cancelar);
        cancelar.setBounds(240, 110, 100, 29);

        excluir.setText("Excluir");
        excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirActionPerformed(evt);
            }
        });
        getContentPane().add(excluir);
        excluir.setBounds(350, 110, 90, 29);

        alterar.setText("Alterar");
        alterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarActionPerformed(evt);
            }
        });
        getContentPane().add(alterar);
        alterar.setBounds(450, 110, 90, 29);

        selecionar.setText("Selecionar");
        selecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecionarActionPerformed(evt);
            }
        });
        getContentPane().add(selecionar);
        selecionar.setBounds(40, 330, 120, 29);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoActionPerformed
        tabelaAvaliador.clearSelection();
        idAvaliador.setEnabled(false);
        tabelaAvaliador.setEnabled(false);
        model.novoAvaliador();
        alterar.setEnabled(false);

        excluir.setEnabled(false);
        pesquisar.setEnabled(false);
        novo.setEnabled(false);
        salvar.setEnabled(true);
        cancelar.setEnabled(true);
        cpf.setText("");
        rg.setText("");
        nome.requestFocus();
    }//GEN-LAST:event_novoActionPerformed

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        if (depende) {
            dialog.dispose();
        } else {
            this.dispose();
        }
    }//GEN-LAST:event_sairActionPerformed

    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        try {
            if (model.getAvaliador() == null) {
                if (nome.getText().isEmpty()) {
                    Funcoes.warn("Avaliador", "Preencha o campo 'Nome'.");
                } else {
                    boolean valida = (new AvaliadorFacade().pesquisarAvaliador(null,
                            nome.getText().toUpperCase(), cpf.getText(), rg.getText())).isEmpty();
                    if (valida) {
                        Avaliador novoAvaliador = new Avaliador();
                        if (cpf.getText() != null && !cpf.getText().isEmpty()) {
                            novoAvaliador.setCpf(new Long(cpf.getText()));
                        }
                        if (rg.getText() != null && !rg.getText().isEmpty()) {
                            novoAvaliador.setRg(new Long(rg.getText()));
                        }
                        novoAvaliador.setNome(nome.getText());
                        new AvaliadorFacade().salvar(novoAvaliador);
                        Funcoes.info("Avaliador", novoAvaliador.getNome() + " salvo com sucesso...");
                        List<Avaliador> lista = model.getListaAvaliador();
                        lista.add(novoAvaliador);
                        model.setListaAvaliador(lista);
                        model.setAvaliador(novoAvaliador);
                    } else {
                        Funcoes.erro("Avaliador", "Avaliador já cadastrado");
                    }
                }
            } else {
                new AvaliadorFacade().salvarAtualizar(model.getAvaliador());
                Funcoes.info("Avaliador", "Avaliador salvo com sucesso.");
            }
            idAvaliador.setEnabled(true);
            tabelaAvaliador.setEnabled(true);
            excluir.setEnabled(true);
            pesquisar.setEnabled(true);
            novo.setEnabled(true);
            salvar.setEnabled(false);
            cancelar.setEnabled(false);
            model.setEditar(false);
            alterar.setEnabled(true);
        } catch (JDBCException e) {
            Funcoes.erro("Erro", "CPF e/ou RG já cadastrados.\nVerifique os dados digitados.");
        } catch (Exception e) {
            e.printStackTrace();
            Funcoes.erro("Erro", e.getMessage());
        }
    }//GEN-LAST:event_salvarActionPerformed

    private void pesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarActionPerformed
        try {
            if (model.getAvaliador() != null && !model.getAvaliador().getIdavaliador().equals(0)) {
                model.setAvaliador(new Avaliador());
            } else {
                pesquisar();
            }
        } catch (Exception e) {
            Funcoes.erro("Erro", e.getMessage());
        }
    }//GEN-LAST:event_pesquisarActionPerformed

    private void excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirActionPerformed
        try {
            if (model.getAvaliador() == null) {
                Funcoes.warn("Avaliador", "Selecione um avaliador");
            } else {
                new AvaliadorFacade().excluir(model.getAvaliador());
                pesquisar();
                Funcoes.info("Exclusão", "Avaliador excluído...");
            }
        } catch (Exception e) {
            Funcoes.erro("Erro", e.getMessage());
        }
    }//GEN-LAST:event_excluirActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        model.setAvaliador(null);
        tabelaAvaliador.setEnabled(true);
        idAvaliador.setEnabled(true);
        excluir.setEnabled(true);
        pesquisar.setEnabled(true);
        novo.setEnabled(true);
        salvar.setEnabled(false);
        cancelar.setEnabled(false);
        alterar.setEnabled(true);
        model.setEditar(false);
    }//GEN-LAST:event_cancelarActionPerformed

    private void alterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarActionPerformed
        if (model.getAvaliador() != null) {
            tabelaAvaliador.setEnabled(false);
            idAvaliador.setEnabled(false);
            excluir.setEnabled(false);
            pesquisar.setEnabled(false);
            novo.setEnabled(false);
            salvar.setEnabled(true);
            cancelar.setEnabled(true);
            alterar.setEnabled(false);
            model.setEditar(true);
        } else {
            Funcoes.warn("Avaliador", "Selecione um avaliador");
        }

    }//GEN-LAST:event_alterarActionPerformed

    private void selecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecionarActionPerformed
        dialog.dispose();
    }//GEN-LAST:event_selecionarActionPerformed

    private void pesquisar() throws Exception {
        AvaliadorFacade facade = new AvaliadorFacade();

        model.setListaAvaliador(facade.pesquisarAvaliador(idAvaliador.getText(),
                nome.getText().toUpperCase(), cpf.getText(), rg.getText()));
        int size = model.getListaAvaliador().size() - 1;
        if (size > 0) {
            model.setAvaliador(model.getListaAvaliador().get(size));
        }
    }

    public ModeloAvaliador getModel() {
        return model;
    }

    public List<Avaliador> getSelecionados() {
        return model.getSelecionados();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alterar;
    private javax.swing.JButton cancelar;
    private javax.swing.JTextField cpf;
    private javax.swing.JButton excluir;
    private javax.swing.JTextField idAvaliador;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nome;
    private javax.swing.JButton novo;
    private javax.swing.JButton pesquisar;
    private javax.swing.JTextField rg;
    private javax.swing.JButton sair;
    private javax.swing.JButton salvar;
    private javax.swing.JButton selecionar;
    private javax.swing.JTable tabelaAvaliador;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    private ModeloAvaliador model;
    private boolean depende;
    private JDialog dialog;
}
