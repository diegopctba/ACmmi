/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TelaArquivoAvaliacao.java
 *
 * Created on 24/11/2009, 13:54:44
 */
package appcmmi.form.avaliacao;

import appcmmi.PrincipalFrame;
import appcmmi.db.facade.avaliacao.AvaliacaoEspecificaFacade;
import appcmmi.db.facade.avaliacao.AvaliacaoFacade;
import appcmmi.db.facade.avaliacao.AvaliacaoGenericaFacade;
import appcmmi.db.pojo.avaliacao.Avaliacao;
import appcmmi.db.pojo.avaliacao.AvaliacaoEspecifica;
import appcmmi.db.pojo.avaliacao.AvaliacaoGenerica;
import appcmmi.funcoes.Funcoes;
import appcmmi.funcoes.Propriedades;
import java.io.File;

/**
 *
 * @author diego
 */
public class TelaArquivoAvaliacao extends javax.swing.JDialog {

    /** Creates new form TelaArquivoAvaliacao */
    public TelaArquivoAvaliacao(java.awt.Frame parent, boolean modal, Integer tipo, Avaliacao avaliacao) {
        super(parent, modal);
        initComponents();
        this.tipo = tipo;
        switch (tipo) {
            case EXPORTAR:
                arquivoAvaliacao.setApproveButtonText("Exportar");
                this.avaliacao = avaliacao;
                break;
            case IMPORTAR:
                arquivoAvaliacao.setApproveButtonText("Importar");
                break;
        }
        String irl = Propriedades.getPreferences().get(Propriedades.AVALIACAO, "");
        if (irl != null && !irl.isEmpty()) {
            arquivoAvaliacao.setSelectedFile(new File(irl));
        }
        setVisible(true);
        setTitle("Arquivo Avaliação");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arquivoAvaliacao = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        arquivoAvaliacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arquivoAvaliacaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(arquivoAvaliacao, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(arquivoAvaliacao, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Se a tela for de exportação, retorna a {@link Avaliacao} com todos os campos e relacionamentos preenchidos, e salva no arquivo indicado pelo usuário.
     * Caso a tela seja de importação, será aberto o arquivo indicado. Se a avaliação não existir no banco de dados, será inserida completa com todos os relacionamentos.
     * Se a avaliação existir, será excluída as avaliações de práticas que não tenham sido avaliadas, nem comentadas.
     * Se já possuir comentários ou status, será analisado com a prática persistente no banco. Se for diferente, será apresentada uma tela de comparação entre ambas.
     * O usuário deverá selecionar se quer substituir pela avaliação nova, substituir todas as avaliações diferentes pela nova avaliação, não substituir e permanecer a avaliação já cadastrada, ou não substituir nenhuma.
     * Ao atualizar uma avaliação, será atualiza apenas as avaliações novas ou as substituídas pelo usuário. As avaliações anteriores permanecerão como antes.
     * @param evt
     */
    private void arquivoAvaliacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arquivoAvaliacaoActionPerformed
        if (!evt.getActionCommand().equals("CancelSelection")) {
            try {
                url = arquivoAvaliacao.getSelectedFile().getPath();
                switch (tipo) {

                    case EXPORTAR:
                        Funcoes.exportarArquivo(avaliacao, url, Funcoes.AVALIACAO);
                        Funcoes.info("Avaliação", "Avaliação exportada com sucesso.");
                        break;

                    case IMPORTAR:
                        AvaliacaoFacade facadeAvaliacao = new AvaliacaoFacade();
                        arquivoAvaliacao.setApproveButtonText("Importar");
                        avaliacao = (Avaliacao) Funcoes.importaArquivo(arquivoAvaliacao.getSelectedFile().getPath());
                        //String senha = (String) Funcoes.pergunta("Importar avaliação", "Por favor, digite a senha");
                        TelaSenha tela = new TelaSenha(PrincipalFrame.getFrames()[0], true, false);
                        String senha = tela.getSenha();
                        tela.dispose();
                        if (senha != null && senha.equals(avaliacao.getSenha())) {
                            Integer idlocal = facadeAvaliacao.retornaIdAvaliacaoLocal(avaliacao);
                            boolean simTodos = false,
                                    naoTodos = false;
                            if (idlocal != null && idlocal > 0) {
                                for (int x = avaliacao.getAvaliacaoEspecificaList().size() - 1; x >= 0; x--) {
                                    //valida as práticas específicas
                                    AvaliacaoEspecifica e = avaliacao.getAvaliacaoEspecificaList().get(x);
                                    if ((e.getComentario() == null || e.getComentario().isEmpty()) && e.getIdStatusDefinicao() == null) {
                                        avaliacao.getAvaliacaoEspecificaList().remove(x);
                                    } else {
                                        AvaliacaoEspecifica local = new AvaliacaoEspecificaFacade().retornaAvaliacaoEspecifica(
                                                idlocal, e.getIdpraticaespecifica().getIdespecifica());
                                        if ((!e.equals(local)) && (!simTodos)) {
                                            if (naoTodos) {
                                                avaliacao.getAvaliacaoEspecificaList().set(x, local);
                                            } else if ((local.getIdStatusDefinicao() != null && local.getComentario() != null) ||
                                                    (local.getComentario() != null && !local.getComentario().isEmpty())) {
                                                opcaoAvaliacaoPratica(local, e, x, simTodos, naoTodos);
                                                if (avaliacao == null) {
                                                    break;
                                                }
                                            }
                                        } else {
                                            avaliacao.getAvaliacaoEspecificaList().remove(x);
                                        }
                                    }
                                }
                                for (int x = avaliacao.getAvaliacaoGenericaList().size() - 1; x >= 0; x--) {
                                    //valida as praticas genéricas
                                    AvaliacaoGenerica g = avaliacao.getAvaliacaoGenericaList().get(x);
                                    if ((g.getComentario() == null || g.getComentario().isEmpty()) && g.getIdStatusDefinicao() == null) {
                                        avaliacao.getAvaliacaoGenericaList().remove(x);
                                    } else {
                                        AvaliacaoGenerica local = new AvaliacaoGenericaFacade().retornaAvaliacaoGenerica(idlocal,
                                                g.getIdpraticagenerica().getIdgenerica());
                                        if (!g.equals(local) && !simTodos) {
                                            if (naoTodos) {
                                                avaliacao.getAvaliacaoGenericaList().set(x, g);
                                            } else if (g.getComentario() != null && !g.getComentario().isEmpty() && g.getIdStatusDefinicao() != null) {
                                                opcaoAvaliacaoPratica(local, g, x, simTodos, naoTodos);
                                                if (avaliacao == null) {
                                                    break;
                                                }
                                            }
                                        } else {
                                            avaliacao.getAvaliacaoGenericaList().remove(x);
                                        }
                                    }
                                }
                                if (avaliacao != null) {
                                    facadeAvaliacao.importarAvaliacao(avaliacao);
                                }
                            } else {
                                facadeAvaliacao.importarAvaliacao(avaliacao);
                            }
                            Funcoes.info("Avaliação", "Avaliação importada com sucesso.");
                        } else {
                            Funcoes.erro("Avaliação", "Senha incorreta");
                        }
                        break;
                }
                Propriedades.getPreferences().put(Propriedades.AVALIACAO, url);
                this.dispose();
            } catch (Exception e) {
                e.printStackTrace();
                Funcoes.erro("Erro", e.getMessage());
            }
        } else {
            this.dispose();
        }
    }//GEN-LAST:event_arquivoAvaliacaoActionPerformed

    private void opcaoAvaliacaoPratica(Object local, Object pratica, int posicao, boolean simTodos, boolean naoTodos) {

        int valor = Funcoes.opcaoAvaliacao(pratica, local);
        switch (valor) {
            case 0:
                //substitui a avaliação anterior pela nova.
                break;
            case 1:
                //substitui todas as avaliações diferentes pela nova.
                simTodos = true;
                break;
            case 2:
                //permanece a mesma avaliação cadastrada no banco, por isso é necessário trocar a avaliação nova pela antiga.
                setaAvaliacao(posicao, local);
                break;
            case 3:
                //permanece a mesma avaliação cadastrada no banco, por isso é necessário trocar a avaliação nova pela antiga.
                //permanece para todas as avaliações diferentes.
                naoTodos = true;
                setaAvaliacao(posicao, local);
                break;
            case 4:
                //cancela, por isso torna a avaliação nula, para não alterar o banco.
                avaliacao = null;
                break;
        }
    }

    private void setaAvaliacao(int posicao, Object local) {
        if (local instanceof AvaliacaoEspecifica) {
            avaliacao.getAvaliacaoEspecificaList().set(posicao, (AvaliacaoEspecifica) local);
        } else if (local instanceof AvaliacaoGenerica) {
            avaliacao.getAvaliacaoGenericaList().set(posicao, (AvaliacaoGenerica) local);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                TelaArquivoAvaliacao dialog = new TelaArquivoAvaliacao(new javax.swing.JFrame(), true, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public Avaliacao getAvaliacao() {
        return avaliacao;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser arquivoAvaliacao;
    // End of variables declaration//GEN-END:variables
    private int tipo;
    public static final int IMPORTAR = 0;
    public static final int EXPORTAR = 1;
    private String url;
    private Avaliacao avaliacao;
}
