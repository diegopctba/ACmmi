/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TelaAvaliacao.java
 *
 * Created on 29/08/2009, 10:56:35
 */
package appcmmi.form.avaliacao;

import appcmmi.*;
import appcmmi.db.facade.EmpresaFacade;
import appcmmi.db.facade.avaliacao.AvaliacaoFacade;
import appcmmi.db.facade.modelo.EspecificaFacade;
import appcmmi.db.facade.modelo.GenericaFacade;
import appcmmi.db.facade.modelo.MaturidadeFacade;
import appcmmi.db.pojo.Empresa;
import appcmmi.db.pojo.Ativo;
import appcmmi.db.pojo.avaliacao.Avaliacao;
import appcmmi.db.pojo.avaliacao.AvaliacaoEspecifica;
import appcmmi.db.pojo.avaliacao.AvaliacaoGenerica;
import appcmmi.db.pojo.Avaliador;
import appcmmi.db.pojo.modelo.AreaProcesso;
import appcmmi.db.pojo.modelo.Maturidade;
import appcmmi.db.pojo.modelo.PraticaEspecifica;
import appcmmi.db.pojo.modelo.PraticaGenerica;
import appcmmi.form.empresa.TelaAvaliador;
import appcmmi.form.empresa.TelaEmpresa;
import appcmmi.form.empresa.TelaAtivo;
import appcmmi.funcoes.Funcoes;
import appcmmi.modelo.bind.avaliacao.ModeloNovaAvaliacao;
import appcmmi.modelo.comboBox.ModeloComboMaturidade;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.text.MaskFormatter;

/**
 * Tela de Configuração para criar uma nova avaliação.
 * @author diego
 */
public class TelaCriarAvaliacao extends javax.swing.JInternalFrame {

    /** Creates new form TelaAvaliacao */
    public TelaCriarAvaliacao() {


        try {
            model = new ModeloNovaAvaliacao();

            MaskFormatter mf = new MaskFormatter("##/##/####");
            modeloMaturidade = new ModeloComboMaturidade(new MaturidadeFacade().retornaTodasMaturidade());
            initComponents();
            mf.install(inicio);
            pesquisarEmpresa.addFocusListener(new FocusListener() {

                @Override
                public void focusGained(FocusEvent arg0) {
                }

                @Override
                public void focusLost(FocusEvent arg0) {
                    try {
                        if (!idEmpresa.getText().isEmpty()) {
                            Integer id = idEmpresa.getText().isEmpty() ? 0 : new Integer(idEmpresa.getText());
                            Empresa procurada = new EmpresaFacade().carregarEmpresa(id);
                            if (procurada != null) {
                                procurada.getAtivoList().size();
                                model.setEmpresa(procurada);
                            } else {
                                Funcoes.erro("Empresa", "Empresa não cadastrada");
                            }
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        Funcoes.erro("Erro", ex.getMessage());
                    }
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            Funcoes.erro("Erro", ex.getMessage());
        }

        maturidade.setModel(modeloMaturidade);

        setVisible(true);
        setSize(700, 550);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        grupoAvaliacao = new javax.swing.ButtonGroup();
        painelEmpresa = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        idEmpresa = new javax.swing.JTextField();
        pesquisarEmpresa = new javax.swing.JButton();
        nomeEmpresa = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        telefone = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        contato = new javax.swing.JTextField();
        painelConfiguracao = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        maturidade = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        idProjeto = new javax.swing.JTextField();
        nomeProjeto = new javax.swing.JTextField();
        procuraProjeto = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        idAvaliador = new javax.swing.JTextField();
        procuraAvaliador = new javax.swing.JButton();
        nomeAvaliador = new javax.swing.JTextField();
        incluirAvaliador = new javax.swing.JButton();
        excluirAvaliador = new javax.swing.JButton();
        incluirProjeto = new javax.swing.JButton();
        excluirProjeto = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        institucionalizacao = new javax.swing.JCheckBox();
        definicao = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaAtivo = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaAvaliador = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        inicio = new javax.swing.JFormattedTextField();
        cancelar = new javax.swing.JButton();
        criar = new javax.swing.JButton();
        limpar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Nova Avaliação");
        setFrameIcon(null);
        getContentPane().setLayout(null);

        painelEmpresa.setBorder(javax.swing.BorderFactory.createTitledBorder("Empresa"));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Código");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.empresa.idempresa}"), idEmpresa, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        pesquisarEmpresa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/appcmmi/form/imagem/lupa.png"))); // NOI18N
        pesquisarEmpresa.setToolTipText("Procurar Empresa");
        pesquisarEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarEmpresaActionPerformed(evt);
            }
        });

        nomeEmpresa.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.empresa.nomefantasia}"), nomeEmpresa, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel2.setText("Telefone");

        telefone.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.empresa.telefone}"), telefone, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel3.setText("Contato");

        contato.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.empresa.contato}"), contato, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout painelEmpresaLayout = new javax.swing.GroupLayout(painelEmpresa);
        painelEmpresa.setLayout(painelEmpresaLayout);
        painelEmpresaLayout.setHorizontalGroup(
            painelEmpresaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEmpresaLayout.createSequentialGroup()
                .addGroup(painelEmpresaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelEmpresaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelEmpresaLayout.createSequentialGroup()
                        .addComponent(idEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pesquisarEmpresa, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(painelEmpresaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painelEmpresaLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contato, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painelEmpresaLayout.createSequentialGroup()
                        .addComponent(nomeEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        painelEmpresaLayout.setVerticalGroup(
            painelEmpresaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEmpresaLayout.createSequentialGroup()
                .addGroup(painelEmpresaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelEmpresaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(idEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nomeEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pesquisarEmpresa))
                .addGap(8, 8, 8)
                .addGroup(painelEmpresaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(contato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(painelEmpresa);
        painelEmpresa.setBounds(0, 0, 680, 102);

        painelConfiguracao.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuração"));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Maturidade");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), maturidade, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel5.setText("Ativos");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), idProjeto, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        nomeProjeto.setName("Projetos"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), nomeProjeto, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        procuraProjeto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/appcmmi/form/imagem/lupa.png"))); // NOI18N
        procuraProjeto.setToolTipText("Pesquisar Projetos");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), procuraProjeto, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        procuraProjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                procuraProjetoActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Avaliador");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), idAvaliador, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        procuraAvaliador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/appcmmi/form/imagem/lupa.png"))); // NOI18N
        procuraAvaliador.setToolTipText("Pesquisar Avaliadores");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), procuraAvaliador, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        procuraAvaliador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                procuraAvaliadorActionPerformed(evt);
            }
        });

        nomeAvaliador.setName("Avaliador"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), nomeAvaliador, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        incluirAvaliador.setText("Incluir");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), incluirAvaliador, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        incluirAvaliador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incluirAvaliadorActionPerformed(evt);
            }
        });

        excluirAvaliador.setText("Excluir");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), excluirAvaliador, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        excluirAvaliador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirAvaliadorActionPerformed(evt);
            }
        });

        incluirProjeto.setText("Incluir");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), incluirProjeto, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        incluirProjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incluirProjetoActionPerformed(evt);
            }
        });

        excluirProjeto.setText("Excluir");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), excluirProjeto, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        excluirProjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirProjetoActionPerformed(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Tipo");

        institucionalizacao.setText("Institucionalização");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), institucionalizacao, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        definicao.setText("Definição");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), definicao, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${model.ativos}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, listaAtivo);
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.selecAtivos}"), listaAtivo, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), listaAtivo, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(listaAtivo);

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${model.avaliadores}");
        jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, listaAvaliador);
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.selecAvaliadores}"), listaAvaliador, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), listaAvaliador, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(listaAvaliador);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Início");

        inicio.setColumns(10);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.avaliacao.dataInicio}"), inicio, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), inicio, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout painelConfiguracaoLayout = new javax.swing.GroupLayout(painelConfiguracao);
        painelConfiguracao.setLayout(painelConfiguracaoLayout);
        painelConfiguracaoLayout.setHorizontalGroup(
            painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                        .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maturidade, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                                .addComponent(definicao)
                                .addGap(40, 40, 40)
                                .addComponent(institucionalizacao)))
                        .addContainerGap())
                    .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                        .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                            .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                                .addComponent(idProjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(procuraProjeto)
                                .addGap(6, 6, 6)
                                .addComponent(nomeProjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                                .addComponent(idAvaliador, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(procuraAvaliador)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nomeAvaliador, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(excluirProjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(incluirProjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(excluirAvaliador, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(incluirAvaliador, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(113, 113, 113))))
            .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inicio, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(468, Short.MAX_VALUE))
        );
        painelConfiguracaoLayout.setVerticalGroup(
            painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(definicao)
                    .addComponent(institucionalizacao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(maturidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                        .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(nomeProjeto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(idProjeto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))
                            .addComponent(procuraProjeto, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelConfiguracaoLayout.createSequentialGroup()
                        .addComponent(incluirProjeto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(excluirProjeto)
                        .addGap(52, 52, 52)))
                .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(incluirAvaliador)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(excluirAvaliador))
                    .addGroup(painelConfiguracaoLayout.createSequentialGroup()
                        .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(idAvaliador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nomeAvaliador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(procuraAvaliador))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(inicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(painelConfiguracao);
        painelConfiguracao.setBounds(0, 110, 680, 360);

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        getContentPane().add(cancelar);
        cancelar.setBounds(190, 470, 90, 29);

        criar.setText("Criar");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${model.editar}"), criar, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        criar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarActionPerformed(evt);
            }
        });
        getContentPane().add(criar);
        criar.setBounds(100, 470, 80, 29);

        limpar.setText("Limpar");
        limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparActionPerformed(evt);
            }
        });
        getContentPane().add(limpar);
        limpar.setBounds(290, 470, 90, 29);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Retorna o ModeloNovaAvaliacao
     * @return ModeloNovaAvaliacao
     */
    public ModeloNovaAvaliacao getModel() {
        return model;
    }

    /**
     * Insere o ModeloNovaAvaliacao
     * @param model
     */
    public void setModel(ModeloNovaAvaliacao model) {
        this.model = model;
    }

    /**
     * Fecha a tela de Nova avaliação
     * @param evt
     */
    /**
     * Incluir elementos na lista de projetos
     * @param evt
     */
    private void incluirProjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incluirProjetoActionPerformed
}//GEN-LAST:event_incluirProjetoActionPerformed

    /**
     * Exclui elementos selecionados da lista de projetos
     * @param evt
     */
    private void excluirProjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirProjetoActionPerformed
        model.removerAtivos();
    }//GEN-LAST:event_excluirProjetoActionPerformed

    /**
     * Inclui elemento na lista de avaliadores
     * @param evt
     */
    private void incluirAvaliadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incluirAvaliadorActionPerformed
    }//GEN-LAST:event_incluirAvaliadorActionPerformed

    /**
     * Excluir elementos selecionados da lista de avaliadores
     * @param evt
     */
    private void excluirAvaliadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirAvaliadorActionPerformed
        model.removerAvaliadores();
    }//GEN-LAST:event_excluirAvaliadorActionPerformed

    /**
     * Ação do botão limpar
     * @param evt
     */
    private void limparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparActionPerformed
        limpar();
    }//GEN-LAST:event_limparActionPerformed

    /**
     * Método interno para limpar campos da tela.
     */
    private void limpar() {
        model.novaAvaliacao();
        definicao.setSelected(false);
        institucionalizacao.setSelected(false);
        modeloMaturidade.setSelectedItem(null);
        listaAtivo.removeAll();
        listaAtivo.revalidate();
        listaAvaliador.removeAll();
        listaAvaliador.revalidate();
        listaAvaliador.repaint();
        System.out.println("Campos limpados para uma nova avaliação.");
        this.repaint();
        this.revalidate();
        idEmpresa.requestFocus();
    }

    /**
     * Cria uma nova avaliação de acordo com a configuração informada na tela.
     * Ao criar a avaliação com sucesso, é perguntado se é necessário iniciar a avaliação,
     * caso contrário, os campos são limpados para poder inserir uma nova configuração.
     * @param evt
     */
    private void criarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarActionPerformed
        try {
            String validacao = validacao();
            //Se validacao == null, entao todos os campos preenchidos e segue para salvar a avaliacao
            if (validacao == null) {
                try {
                    TelaSenha solicitaSenha = new TelaSenha(PrincipalFrame.getFrames()[0], true, true);
                    String senha = solicitaSenha.getSenha();
                    solicitaSenha.dispose();
                    if (senha != null && !senha.isEmpty()) {
                        Avaliacao novo = model.getAvaliacao();
                        novo.setDefinicao(definicao.isSelected());
                        novo.setInstitucionalizacao(institucionalizacao.isSelected());
                        novo.setAtivoList(model.getAtivos());
                        novo.setAvaliadorList(model.getAvaliadores());
                        novo.setIdmaturidade(modeloMaturidade.getSelectedItem());
                        novo.setDataCriacao(new Date());
                        novo.setIdempresa(model.getEmpresa());
                        novo.setSenha(senha);
                        novo.setAvaliacaoEspecificaList(new ArrayList<AvaliacaoEspecifica>());
                        novo.setAvaliacaoGenericaList(new ArrayList<AvaliacaoGenerica>());
                        List<PraticaEspecifica> especifica = new EspecificaFacade().retornaEspecificaAvaliacao(novo.getIdmaturidade().getNummaturidade());
                        for (PraticaEspecifica e : especifica) {
                            AvaliacaoEspecifica ae = new AvaliacaoEspecifica();
                            ae.setIdavaliacao(novo);
                            ae.setIdpraticaespecifica(e);
                            novo.getAvaliacaoEspecificaList().add(ae);
                        }
                        List<Maturidade> maturidades = new MaturidadeFacade().listaMaturidadesAvaliacao(novo.getIdmaturidade().getNummaturidade());
                        maturidades.size();
                        for (Maturidade m : maturidades) {
                            m.getAreaProcessoList().size();
                        }
                        for (Maturidade m : maturidades) {
                            List<PraticaGenerica> generica = new GenericaFacade().retornaGenericasMaturidade(m.getIdmaturidade());
                            for (AreaProcesso a : m.getAreaProcessoList()) {
                                for (PraticaGenerica g : generica) {
                                    AvaliacaoGenerica ag = new AvaliacaoGenerica();
                                    ag.setIdavaliacao(novo);
                                    ag.setIdpraticagenerica(g);
                                    ag.setIdAreaProcesso(a);
                                    novo.getAvaliacaoGenericaList().add(ag);
                                }
                            }
                        }
                        novo.setEstado("CRIADA");
                        new AvaliacaoFacade().salvarAvaliacao(novo);
                        int opcao = Funcoes.opcao("Confirmação", "Deseja iniciar a avaliação agora?");
                        if (opcao == 0) {
                            TelaAvaliacao avaliacao = new TelaAvaliacao(novo.getIdAvaliacao());
                            PrincipalFrame.atualizarTela(this, avaliacao);
                        } else {
                            limpar();
                        }
                    } else {
                        Funcoes.warn("Avaliação", "Para criar uma avaliação, é necessário cadastrar uma senha.");
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    Funcoes.erro("Erro", ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, validacao, "Não foi possível criar avaliação", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Funcoes.erro("Erro", ex.getMessage());
        }
    }//GEN-LAST:event_criarActionPerformed

    /**
     * Chamada da tela de Empresas, a fim de pesquisar e selecionar uma Empresa, que será avaliada.
     * @param evt
     */
    private void pesquisarEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarEmpresaActionPerformed
        try {
            JDialog dialogEmpresa = new JDialog(PrincipalFrame.getFrames()[0], true);
            TelaEmpresa frmEmpresa = new TelaEmpresa(dialogEmpresa);
            dialogEmpresa.add(frmEmpresa);
            dialogEmpresa.setLocationByPlatform(true);
            dialogEmpresa.setSize(frmEmpresa.getSize());
            dialogEmpresa.setVisible(true);
            //Empresa empresa = new EmpresaFacade().carregarEmpresa(2);
            Empresa empresa = frmEmpresa.getEmpresaSelecionada();
            dialogEmpresa.dispose();
            if (empresa != null) {
                empresa.getRazaosocial();
                model.setEmpresa(empresa);
            }
        } catch (Exception ex) {
            Funcoes.erro("Erro", ex.getMessage());
        }
    }//GEN-LAST:event_pesquisarEmpresaActionPerformed

    /**
     * Chamada de tela de Projetos, enviando a Empresa como parâmetro.
     * @param evt
     */
    private void procuraProjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_procuraProjetoActionPerformed

        if (model.getEmpresa() != null && model.getEmpresa().getIdempresa() != null && model.getEmpresa().getIdempresa() > 0) {
            JDialog dialog = new JDialog(PrincipalFrame.getFrames()[0], true);
            TelaAtivo evento = new TelaAtivo(dialog, model.getEmpresa(), true);
            //dialog.setLocationRelativeTo(evento);
            dialog.add(evento);
            dialog.setSize(evento.getSize());
            dialog.setVisible(true);
            List<Ativo> lista = evento.getSelecionados();
            if (lista != null && !lista.isEmpty()) {
                if (lista.size() <= 4) {
                    for (Ativo a : lista) {
                        System.out.println(a.getNome());
                    }
                    model.setAtivos(lista);
                    System.out.println("Inseridos " + lista.size() + " projetos.");
                } else {
                    Funcoes.info("Ativos", "Não é possível inserir mais que 4 ativos.");
                }
            }
        } else {
            Funcoes.erro("Empresa", "Favor selecionar uma empresa, antes de buscar um ativo.");
        }

    }//GEN-LAST:event_procuraProjetoActionPerformed

    /**
     * Imprime a tela de Avaliador para pesquisa e seleção dos avaliadores a serem cadastrados junto à avaliação.
     * @param evt
     */
    private void procuraAvaliadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_procuraAvaliadorActionPerformed
        JDialog dialog = new JDialog(PrincipalFrame.getFrames()[0], true);
        TelaAvaliador avaliador = new TelaAvaliador(dialog, true);
        dialog.add(avaliador);
        dialog.setSize(avaliador.getSize());
        dialog.setVisible(true);
        List<Avaliador> lista = avaliador.getSelecionados();
        if (lista != null && !lista.isEmpty()) {
            if (lista.size() < 8) {
                model.setAvaliadores(lista);
                System.out.println(lista.size() + " avaliadores inseridos.");
            } else {
                Funcoes.info("Avaliadores", "É permitido apenas inserir 8 avaliadores");
            }
        }
        //dialog.setl
    }//GEN-LAST:event_procuraAvaliadorActionPerformed

    /**
     * Fecha e cancela a configuração, após confirmação.
     * @param evt
     */
    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        int opcao = Funcoes.opcao("Cancelar configuração", "Deseja cancelar a configuração?");
        //Se SIM
        if (opcao == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_cancelarActionPerformed

    /**
     * Realiza a validação dos campos.
     * @return
     */
    private String validacao() {
        if (!institucionalizacao.isSelected() && !definicao.isSelected()) {
            return "Selecione um tipo de avaliação: Institucionalização ou Definição.";
        } else if (model.getAvaliadores().isEmpty()) {
            return "É necessário indicar no mínimo 1 avaliador.";
        } else if (maturidade.getSelectedIndex() < 0) {
            return "Selecione a maturidade.";
        } else if (model.getAtivos().isEmpty()) {
            return "É necessário indicar no minimo um ativo.";
        } else {
            for (Ativo a : model.getAtivos()) {
                if (a.getNome().equals("ORGANIZACIONAL")) {
                    return null;
                }
            }
            return "É necessário incluir um ativo Organizacional";
        }
    }

    /**
     *  Método genérico para remover itens selecionados de uma JList
     * @param modelo
     * @param lista
     * @author diego
     * @since 18/09/09
     */
    private void excluirElemento(DefaultListModel modelo, JList lista) {
        int[] indices = lista.getSelectedIndices();
        for (int x = indices.length - 1; x >=
                0; x--) {
            modelo.removeElementAt(indices[x]);
        }

    }

    /**
     * Método genérico para inserir item em uma JList
     * @param modelo
     * @param campo
     * @author diego
     * @since 18/09/09
     */
    private void inserirElemento(DefaultListModel modelo, JTextField campo) {
        if (campo.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Preencha o campo " + campo.getName(), campo.getName() + ".", JOptionPane.YES_OPTION);
        } else if (modelo.contains(campo.getText())) {
            JOptionPane.showMessageDialog(this, "'" + campo.getText() + "' já foi inserido.", campo.getName(), JOptionPane.YES_OPTION);
        } else {
            modelo.addElement(campo.getText());
            campo.setText("");
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JTextField contato;
    private javax.swing.JButton criar;
    private javax.swing.JCheckBox definicao;
    private javax.swing.JButton excluirAvaliador;
    private javax.swing.JButton excluirProjeto;
    private javax.swing.ButtonGroup grupoAvaliacao;
    private javax.swing.JTextField idAvaliador;
    private javax.swing.JTextField idEmpresa;
    private javax.swing.JTextField idProjeto;
    private javax.swing.JButton incluirAvaliador;
    private javax.swing.JButton incluirProjeto;
    private javax.swing.JFormattedTextField inicio;
    private javax.swing.JCheckBox institucionalizacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton limpar;
    private javax.swing.JList listaAtivo;
    private javax.swing.JList listaAvaliador;
    private javax.swing.JComboBox maturidade;
    private javax.swing.JTextField nomeAvaliador;
    private javax.swing.JTextField nomeEmpresa;
    private javax.swing.JTextField nomeProjeto;
    private javax.swing.JPanel painelConfiguracao;
    private javax.swing.JPanel painelEmpresa;
    private javax.swing.JButton pesquisarEmpresa;
    private javax.swing.JButton procuraAvaliador;
    private javax.swing.JButton procuraProjeto;
    private javax.swing.JTextField telefone;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    private ModeloComboMaturidade modeloMaturidade;
    private ModeloNovaAvaliacao model;
}
